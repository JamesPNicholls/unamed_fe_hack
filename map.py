from json import load
from enum import Enum
import pygame as p

x_size = 15
y_size = 21

class terrain_type(Enum):
    dash    = 0
    plains  = 1
    forest  = 2
    house   = 3
    village = 4
    cliff   = 5
    sea     = 6
    ruins   = 7
    mnt     = 8
    peak    = 9
    gate    = 0xa

class Cmap:
    # Only used during construction of the map its Csquare children
    grid_size = 55

    map_grid = [
        [0x01, 0x01, 0x01, 0x01, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09],
        [0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09],
        [0x01, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x09, 0x09, 0x09, 0x09, 0x09],
        [0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x08, 0x08, 0x01, 0x09, 0x09, 0x09, 0x09],
        [0x01, 0x01, 0x01, 0x01, 0x00, 0x0a, 0x00, 0x01, 0x01, 0x02, 0x08, 0x08, 0x09, 0x09, 0x09],
        [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x08, 0x09],
        [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x09],
        [0x05, 0x05, 0x01, 0x07, 0x07, 0x07, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x08, 0x09],
        [0x06, 0x05, 0x01, 0x07, 0x07, 0x07, 0x01, 0x01, 0x05, 0x02, 0x02, 0x01, 0x01, 0x02, 0x09],
        [0x05, 0x02, 0x01, 0x07, 0x07, 0x07, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x01],
        [0x02, 0x05, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01],
        [0x05, 0x02, 0x01, 0x01, 0x05, 0x05, 0x05, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
        [0x06, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
        [0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
        [0x06, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01],
        [0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x03, 0x01, 0x01],
        [0x01, 0x01, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x01, 0x01, 0x01, 0x01, 0x02],
        [0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x02],
        [0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01],
        [0x01, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x00, 0x04, 0x00, 0x01],
        [0x02, 0x01, 0x02, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01]]


    def __init__(self) -> None:
        # game map images
        self.game_Map = p.image.load('sprites/map/map_Demo.png').convert()
        self.game_Map = p.transform.scale(self.game_Map, (int(3.5*240),int(3.5*336)))    
        self.game_Map_Pos = [0,0]

        # Open json containing grid data, and temp store it in data
        # 'with' automatically closes when out of scope
        with open('data/base_stats.json', 'r') as f:
            data = load(f) 

        for y in range(0,y_size):
            for x in range(0,x_size):
                # generate the tile object and fill it the properties, edit .json to change tile stats
                self.map_grid[y][x] = Csquare(
                    data['tile_stats'][self.map_grid[y][x]]['name'],     
                    data['tile_stats'][self.map_grid[y][x]]['stat_bonus_def'],
                    data['tile_stats'][self.map_grid[y][x]]['stat_bonus_avd'],
                    data['tile_stats'][self.map_grid[y][x]]['heal_amount'],
                    data['tile_stats'][self.map_grid[y][x]]['traverse_lvl'])    
        
        self.map_pos = [0,0]

    def print_map(self):
        for x in self.map_grid:
            for y in x:
                y.print_data()
            print('new row')

    def update_map_pos(self, key_press):
        if key_press == 'up'   :
            if self.map_pos[1] > 0:
                self.map_pos[1] -= 1

        if key_press == 'down' :
            if self.map_pos[1] < y_size-1:
                self.map_pos[1] += 1

        if key_press == 'left' :
            if self.map_pos[0] > 0:
                self.map_pos [0] -= 1
        if key_press == 'right':
            if self.map_pos[0] < x_size-1:
                self.map_pos[0] += 1 
        

class Csquare(Cmap):
    def __init__(self, name, bonus_def, bonus_avd, heal_amt, traverse_amt) -> None:
        self.name           = name 
        self.bonus_def      = bonus_def     
        self.bonus_avd      = bonus_avd     
        self.heal_amount    = heal_amt         
        self.traverse_amt   = traverse_amt         
        self.occupied       = 0
        return

    def print_data(self):
        print(self.name, '\t'
        ,self.bonus_def
        ,self.bonus_avd
        ,self.heal_amount
        ,self.traverse_amt
        ,self.occupied)

# Objects to be created later

class Cgame_Icon(Cmap):
    
    pass

class Cterrain_disp(Cmap):
    pass

class Cunit_window(Cmap):
    pass

class Cmini_map(Cmap):
    pass

class Ccombat_menu(Cmap):
    pass

class Ccommand_menu(Cmap):
    pass

# Test functions  
# map = Cmap()
# map.print_map()